{"version":3,"sources":["results.js","search.js","App.js","index.js"],"names":["WeatherNotFound","props","className","error","message","WeatherDetails","Math","round","this","data","main","temp","name","sys","country","celsius","getCelsius","getFahrenheit","onClick","toggle","React","Component","WeatherResults","state","SearchForm","onSubmit","id","type","onChange","value","required","FormAndResults","handleSubmit","handleChange","query","toggleScale","WeatherApp","bind","target","setState","event","preventDefault","fetch","response","ok","Error","statusText","json","test","weather","getMainWeather","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAgBA,SAASA,EAAgBC,GACvB,OACE,yBAAKC,UAAU,kBACb,2BAAID,EAAME,MAAQF,EAAME,MAAMC,QAAU,uB,IAKxCC,E,2KAEF,MAAM,GAAN,OAAUC,KAAKC,MAAMC,KAAKP,MAAMQ,KAAKC,KAAKC,KAAO,QAAjD,W,sCAGA,MAAM,GAAN,OAAUL,KAAKC,MAAM,IAAAC,KAAKP,MAAMQ,KAAKC,KAAKC,KAAiB,QAA3D,W,+BAGA,OACE,yBAAKT,UAAU,kBACb,4BACE,4BACGM,KAAKP,MAAMQ,KAAKG,KADnB,KAC2BJ,KAAKP,MAAMQ,KAAKI,IAAIC,SAE/C,4BACGN,KAAKP,MAAMc,QAAUP,KAAKQ,aAAeR,KAAKS,iBAEjD,4BAAQC,QAASV,KAAKP,MAAMkB,QAA5B,4B,GAjBmBC,IAAMC,WAwBpBC,EA7Cf,SAAwBrB,GACtB,OAAIA,EAAMsB,MAAMd,KAEZ,kBAAC,EAAD,CACEA,KAAMR,EAAMsB,MAAMd,KAClBM,QAASd,EAAMsB,MAAMR,QACrBI,OAAQlB,EAAMkB,SAIb,kBAACnB,EAAD,CAAiBG,MAAOF,EAAMsB,MAAMpB,S,MCI7C,SAASqB,EAAWvB,GAClB,OACE,0BAAMwB,SAAUxB,EAAMwB,UACpB,0GAEE,6BAFF,iGAKE,6BACA,2BACEC,GAAG,cACHC,KAAK,OACLC,SAAU3B,EAAM2B,SAChBC,MAAO5B,EAAM4B,MACbC,UAAQ,KAGZ,4BAAQH,KAAK,UAAb,WAKSI,MAnCf,SAAwB9B,GACtB,OACE,yBAAKC,UAAU,kBACb,kBAACsB,EAAD,CACEC,SAAUxB,EAAM+B,aAChBJ,SAAU3B,EAAMgC,aAChBJ,MAAO5B,EAAMsB,MAAMW,QAErB,kBAAC,EAAD,CAAgBX,MAAOtB,EAAMsB,MAAOJ,OAAQlB,EAAMkC,gBC2DzCC,E,kDAjEb,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACXW,MAAO,GACPzB,KAAM,KACNN,MAAO,KACPY,SAAS,GAGX,EAAKkB,aAAe,EAAKA,aAAaI,KAAlB,gBACpB,EAAKL,aAAe,EAAKA,aAAaK,KAAlB,gBACpB,EAAKF,YAAc,EAAKA,YAAYE,KAAjB,gBAXF,E,4DAcO,IAAXC,EAAU,EAAVA,OACb9B,KAAK+B,SAAS,CAAEL,MAAOI,EAAOT,U,4EAGbW,G,kFACjBA,EAAMC,iBACAP,EAAQ1B,KAAKe,MAAMW,MACb,mC,SAEWQ,MAAM,qDAAD,OAC2BR,EAD3B,kBAFhB,qC,UAENS,E,gBAICA,EAASC,G,sBAAUC,MAAMF,EAASG,Y,wBACpBH,EAASI,O,QAAtBtC,E,OACND,KAAK+B,SAAS,CAAE9B,OAAMN,MAAO,O,kDAE7BK,KAAK+B,SAAS,CAAEpC,MAAK,KAAEM,KAAM,O,qJAK/BD,KAAK+B,UAAS,SAAChB,GAAD,MAAY,CAAER,SAAUQ,EAAMR,c,uCAQ5C,OAAKP,KAAKe,MAAMd,KACZ,QAAQuC,KAAR,UAAgBxC,KAAKe,MAAMd,KAAKwC,QAAQ,GAAGvC,KAAKgB,KAC3C,WAEFlB,KAAKe,MAAMd,KAAKwC,QAAQ,GAAGvC,KAJL,U,+BAQ7B,OACE,yBAAKR,UAAS,qBAAgBM,KAAK0C,mBACjC,kBAAC,EAAD,CACEjB,aAAczB,KAAKyB,aACnBD,aAAcxB,KAAKwB,aACnBG,YAAa3B,KAAK2B,YAClBZ,MAAOf,KAAKe,a,GA3DGH,IAAMC,WCD/B8B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c15f86b6.chunk.js","sourcesContent":["import React from 'react';\nimport './WeatherResults.css';\n\nfunction WeatherResults(props) {\n  if (props.state.data) {\n    return (\n      <WeatherDetails\n        data={props.state.data}\n        celsius={props.state.celsius}\n        toggle={props.toggle}\n      />\n    );\n  }\n  return <WeatherNotFound error={props.state.error} />;\n}\n\nfunction WeatherNotFound(props) {\n  return (\n    <div className=\"WeatherResults\">\n      <p>{props.error ? props.error.message : 'No data to display'}</p>\n    </div>\n  );\n}\n\nclass WeatherDetails extends React.Component {\n  getCelsius() {\n    return `${Math.round(this.props.data.main.temp - 273.15)}°C`;\n  }\n  getFahrenheit() {\n    return `${Math.round(this.props.data.main.temp * (9 / 5) - 459.67)}°F`;\n  }\n  render() {\n    return (\n      <div className=\"WeatherResults\">\n        <ul>\n          <li>\n            {this.props.data.name}, {this.props.data.sys.country}\n          </li>\n          <li>\n            {this.props.celsius ? this.getCelsius() : this.getFahrenheit()}\n          </li>\n          <button onClick={this.props.toggle}>°C ↔ °F</button>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default WeatherResults;\n","import React from 'react';\nimport WeatherResults from './results';\nimport './FormAndResults.css';\n\nfunction FormAndResults(props) {\n  return (\n    <div className=\"FormAndResults\">\n      <SearchForm\n        onSubmit={props.handleSubmit}\n        onChange={props.handleChange}\n        value={props.state.query}\n      />\n      <WeatherResults state={props.state} toggle={props.toggleScale} />\n    </div>\n  );\n}\n\nfunction SearchForm(props) {\n  return (\n    <form onSubmit={props.onSubmit}>\n      <label>\n        Search for a city. You can specify a country code, or an American state.\n        <br />\n        Examples: \"Melbourne, AU\" for Melbourne in Australia, \"Paris, TX, US\"\n        for Paris in Texas, etc.\n        <br />\n        <input\n          id=\"searchField\"\n          type=\"text\"\n          onChange={props.onChange}\n          value={props.value}\n          required\n        />\n      </label>\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n}\n\nexport default FormAndResults;\n","import React from 'react';\nimport './App.css';\nimport './reset.css';\nimport FormAndResults from './search';\n\nclass WeatherApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: '',\n      data: null,\n      error: null,\n      celsius: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.toggleScale = this.toggleScale.bind(this);\n  }\n\n  handleChange({ target }) {\n    this.setState({ query: target.value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const query = this.state.query;\n    const key = 'f90f55ac16dce1d2e99f1bc07cc2c077';\n\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${query}&appid=${key}`\n    );\n    try {\n      if (!response.ok) throw Error(response.statusText);\n      const data = await response.json();\n      this.setState({ data, error: null });\n    } catch (error) {\n      this.setState({ error, data: null });\n    }\n  }\n\n  toggleScale() {\n    this.setState((state) => ({ celsius: !state.celsius }));\n  }\n\n  /**\n   * Gets the main weather condition name, so we can adjust the\n   * background accordingly. See https://openweathermap.org/weather-conditions\n   */\n  getMainWeather() {\n    if (!this.state.data) return 'Clear';\n    if (/7\\d\\d/.test(`${this.state.data.weather[0].main.id}`)) {\n      return 'Obscured';\n    }\n    return this.state.data.weather[0].main;\n  }\n\n  render() {\n    return (\n      <div className={`WeatherApp ${this.getMainWeather()}`}>\n        <FormAndResults\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          toggleScale={this.toggleScale}\n          state={this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default WeatherApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport WeatherApp from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}