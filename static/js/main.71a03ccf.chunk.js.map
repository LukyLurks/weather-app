{"version":3,"sources":["FormAndResults.js","App.js","index.js"],"names":["SearchForm","props","onSubmit","id","type","onChange","value","required","placeholder","autoFocus","role","aria-label","WeatherResults","state","data","countries","WeatherNotFound","error","message","className","WeatherDetails","countryName","this","getCountryName","prevProps","sys","country","Math","round","main","temp","countryCode","name","find","code","setState","iconId","weather","icon","src","getIconPath","alt","description","getCelsius","getFahrenheit","React","Component","FormAndResults","handleQuerySubmit","handleQueryChange","query","href","WeatherApp","bind","preprocessQuery","fetch","headers","then","response","json","usStates","target","event","preventDefault","trim","querySuffix","test","specifiedPlace","match","toLowerCase","entry","newQuery","replace","sendQuery","console","log","ok","Error","statusText","getMainWeather","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71a03ccf.chunk.js","sourcesContent":["import React from 'react';\nimport './FormAndResults.css';\n\nfunction FormAndResults(props) {\n  return (\n    <div className=\"FormAndResults\">\n\t\t\t<h1>OpenWeatherApp</h1>\n      <SearchForm\n        onSubmit={props.handleQuerySubmit}\n        onChange={props.handleQueryChange}\n        value={props.state.query}\n      />\n      <WeatherResults\n\t\t\t\tstate={props.state}\n\t\t\t\tcountries={props.countries}\n\t\t\t/>\n\t\t\t<footer>\n\t\t\t\tPowered by <a href=\"https://openweathermap.org\">OpenWeather</a>\n\t\t\t</footer>\n    </div>\n  );\n}\n\nfunction SearchForm(props) {\n  return (\n    <form onSubmit={props.onSubmit}>\n      <label>\n        <input\n          id=\"searchField\"\n          type=\"text\"\n          onChange={props.onChange}\n          value={props.value}\n          required\n\t\t\t\t\tplaceholder=\"City or State\"\n\t\t\t\t\tautoFocus={true}\n        />\n      </label>\n      <button type=\"submit\">\n\t\t\t\t<span role=\"img\" aria-label=\"magnifying glass emoji\">üîç</span> Search\n\t\t\t</button>\n    </form>\n  );\n}\n\nfunction WeatherResults(props) {\n  if (props.state.data) {\n    return (\n      <WeatherDetails\n        data={props.state.data}\n\t\t\t\tcountries={props.countries}\n      />\n    );\n  }\n  return <WeatherNotFound error={props.state.error} data={props.state.data} />;\n}\n\nfunction WeatherNotFound(props) {\n\tconst message = <>\n\t\t<h2>{props.error ? props.error.message : \"\"}</h2>\n\t\t<p>\n\t\t\tYou can specify a country/state after a comma, for example:\n\t\t</p>\n\t\t<ul>\n\t\t\t<li>\"paris, texas\" (or \"paris, tx\")</li>\n\t\t\t<li>\"melbourne, australia\" (or \"melbourne, au\")</li>\n\t\t</ul>\n\t</>\n  return (\n    <div className=\"WeatherResults\">{message}</div>\n  );\n}\n\nclass WeatherDetails extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcountryName: '',\n\t\t};\n\t}\n\t\n\tcomponentDidMount() {\n\t\tthis.getCountryName();\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.data.sys.country !== this.props.data.sys.country) {\n\t\t\tthis.getCountryName();\n\t\t}\n\t}\n\n  getCelsius() {\n    return `${Math.round(this.props.data.main.temp - 273.15)}¬∞C`;\n  }\n\n  getFahrenheit() {\n    return `${Math.round(this.props.data.main.temp * (9 / 5) - 459.67)}¬∞F`;\n  }\n\n\tasync getCountryName() {\n\t\tif (!this.props.data) return;\n\t\tconst countryCode = this.props.data.sys.country;\n\t\tconst countries = await this.props.countries;\n\t\tconst name = countries.find(country => country.code === countryCode).name;\n\t\tthis.setState({ countryName: name });\n\t}\n\n\tgetIconPath() {\n\t\tconst iconId = this.props.data.weather[0].icon;\n\t\treturn `http://openweathermap.org/img/wn/${iconId}.png`;\n\t}\n\n  render() {\n    return (\n      <div className=\"WeatherResults\">\n\t\t\t\t<h2>\n\t\t\t\t\t{this.props.data.name}, {this.state.countryName}\n\t\t\t\t</h2>\n\t\t\t\t<img id=\"weather-icon\"\n\t\t\t\t\tsrc={this.getIconPath()}\n\t\t\t\t\talt={this.props.data.weather[0].description}\n\t\t\t\t/>\n        <ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t{this.props.data.weather[0].description}\n\t\t\t\t\t</li>\n          <li>\n            {this.getCelsius()} / {this.getFahrenheit()}\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default FormAndResults;\n","import React from 'react';\nimport './App.css';\nimport './reset.css';\nimport FormAndResults from './FormAndResults.js';\n\nclass WeatherApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: '',\n      data: null,\n      error: null,\n    };\n    this.handleQueryChange = this.handleQueryChange.bind(this);\n\t\tthis.preprocessQuery = this.preprocessQuery.bind(this);\n  }\n\n\tcomponentDidMount() {\n\t\tthis.countries = fetch(\n\t\t\t'countries.json',\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t}\n\t\t\t}\n\t\t).then(response => response.json());\n\n\t\tthis.usStates = fetch(\n\t\t\t'usstates.json',\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t}\n\t\t\t}\n\t\t).then(response => response.json());\n\t}\n\n  handleQueryChange({ target }) {\n    this.setState({ query: target.value });\n  }\n\n\t/**\n\t * Allows for more intuitive/user-friendly queries that the API doesn't\n\t * normally accept, like specifying country/state names in full letters\n\t * instead of ISO codes, etc.\n\t */\n\tasync preprocessQuery(event) {\n\t\tevent.preventDefault();\n\t\tconst query = this.state.query.trim();\n\t\t// ', tx' or ',australia' in stuff like 'paris, tx' or 'melbourne,australia'\n\t\tconst querySuffix = /(,\\s?(?<place>\\w{2,}))$/i;\n\t\tif (querySuffix.test(query)) {\n\t\t\tconst specifiedPlace = query.match(querySuffix)[2].toLowerCase();\n\t\t\ttry {\n\t\t\t\tconst countries = await this.countries;\n\t\t\t\tfor (const entry of countries) {\n\t\t\t\t\tif (specifiedPlace === entry.name.toLowerCase()) {\n\t\t\t\t\t\tconst newQuery = query.replace(specifiedPlace, entry.code);\n\t\t\t\t\t\treturn this.sendQuery(newQuery);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst usStates = await this.usStates;\n\t\t\t\tfor (const entry of usStates) {\n\t\t\t\t\tif (specifiedPlace === entry.name.toLowerCase()) {\n\t\t\t\t\t\tconst newQuery = query.replace(specifiedPlace, entry.code) + ', us';\n\t\t\t\t\t\treturn this.sendQuery(newQuery);\n\t\t\t\t\t}\n\t\t\t\t\tif (specifiedPlace === entry.code.toLowerCase()) {\n\t\t\t\t\t\tconst newQuery = query + ', us';\n\t\t\t\t\t\treturn this.sendQuery(newQuery);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t}\n\t\t}\n\t\treturn this.sendQuery(query);\n\t}\n\n  async sendQuery(query) {\n    const key = 'f90f55ac16dce1d2e99f1bc07cc2c077';\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${query}&appid=${key}`\n    );\n    try {\n      if (!response.ok) throw Error(response.statusText);\n      const data = await response.json();\n      this.setState({ data, error: null });\n    } catch (error) {\n\t\t\tthis.setState({ error, data: null });\n    }\n  }\n\n  /**\n   * Gets the main weather condition name, so we can adjust the\n   * background accordingly. See https://openweathermap.org/weather-conditions\n   */\n  getMainWeather() {\n    if (!this.state.data) return 'Clear';\n    if (/7\\d\\d/.test(`${this.state.data.weather[0].id}`)) {\n      return 'Obscured';\n    }\n    return this.state.data.weather[0].main;\n  }\n\n  render() {\n    return (\n      <div className={`WeatherApp ${this.getMainWeather()}`}>\n        <FormAndResults\n          handleQueryChange={this.handleQueryChange}\n          handleQuerySubmit={this.preprocessQuery}\n          state={this.state}\n\t\t\t\t\tcountries={this.countries}\n        />\n      </div>\n    );\n  }\n}\n\nexport default WeatherApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport WeatherApp from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}